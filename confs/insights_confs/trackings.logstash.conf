input {
	jdbc {
        id => "fetch_trackings_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_page_size => 1000000
        jdbc_paging_enabled => true
        tracking_column => "dt"
        tracking_column_type => "numeric"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE}" }
        statement => "SELECT id, tracking_code, dt, status_code, location, date_added, archived
                      FROM tracking_log
                      WHERE dt >= UNIX_TIMESTAMP(:select_from_date) AND dt > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_trackings_table_last_run"
    }
}
filter {
    jdbc_streaming {
        id => "get_order_info"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        statement => "SELECT id, shop_id, order_reference, carrier_id, service_id, order_id, country, items_data
                      FROM returns_orders
                      WHERE tracking = :event_tracking_code"
        parameters => { "event_tracking_code" => "tracking_code" }
        target => "order"
    }
    json {
		source => "[order][0][items_data]"
        target => "items_data"
	}
    date {
        match => ["dt", "UNIX"]
        remove_field => "dt"
        target => "InsertDttm"
    }
    date {
        match => ["date_added", "UNIX"]
        remove_field => "date_added"
        target => "DateAdded"
    }
    json {
		source => "location"
        target => "location"
	}
    mutate {
        rename => {
            "id" => "TrackingID"
            "tracking_code" => "TrackingCode"
            "archived" => "Archived"
            "status_code" => "StatusCode"
        }
        add_field => {
            "ReturnID" => "%{[order][0][id]}"
            "ClientID" => "%{[order][0][shop_id]}"
            "OrderRef" => "%{[order][0][order_reference]}"
            "CarrierID" => "%{[order][0][carrier_id]}"
            "ServiceID" => "%{[order][0][service_id]}"
            "OrderID" => "%{[order][0][order_id]}"
            "CountryCode" => "%{[order][0][country]}"
        }
        remove_field => [ "@timestamp", "@version", "order" ]
    }
    ruby {
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)
            
            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)

            services_json = File.read(ENV['SERVICES_FILE'])
            @@services = JSON.parse(services_json)

            carriers_json = File.read(ENV['CARRIERS_FILE'])
            @@carriers = JSON.parse(carriers_json)

            statuses_json = File.read(ENV['STATUSES_FILE'])
            @@statuses = JSON.parse(statuses_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]
            service_name = @@services[event.get('ServiceID').to_s]
            carrier_name = @@carriers[event.get('CarrierID').to_s]

            status_code = event.get('StatusCode').to_s
            status_name = @@statuses[status_code]
            
            if client_name.nil? || status_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
                event.set('ServiceName', service_name)
                event.set('CarrierName', carrier_name)
                status_code_data = {
                    'TrackingID' => event.get('TrackingID'),
                    'InsertDttm' => event.get('InsertDttm'),
                    'DateAdded' => event.get('DateAdded'),
                    'Archived' => event.get('Archived'),
                    'StatusName' => status_name
                }
                location = event.get('location')
                status_code_data['Location'] = location if location.kind_of?(Hash)
                event.set(status_code, status_code_data)

                items = event.get('items_data')
                event.remove('items_data')
                if items.kind_of?(Hash)
                    quantity = 0
                    total_price = 0.0
                    items.each { |item_id, item_values|
                        quantity = quantity + item_values['quantity'].to_i
                        total_price = total_price + item_values['price'].to_f * item_values['quantity'].to_i
                    }
                    event.set('Quantity', quantity)
                    event.set('TotalPrice', total_price)
                end
                
                event.set('LastStatusCode', status_code)

                event.remove('StatusCode')
                event.remove('TrackingID')
                event.remove('InsertDttm')
                event.remove('location')
                event.remove('DateAdded')
                event.remove('Archived')

                event.set('ReturnID', event.get('ReturnID').to_i)
                event.set('ClientID', event.get('ClientID').to_i)
                event.set('CarrierID', event.get('CarrierID').to_i)
                event.set('ServiceID', event.get('ServiceID').to_i)
                event.set('OrderID', event.get('OrderID').to_i)
            end
        "
    }
}
output {
    elasticsearch {
            hosts => "${ES_HOST}"
            index => "trackings_records_v2"
            document_id => "%{ClientID}_%{OrderRef}_%{TrackingCode}"
            user => "${ES_USER}"
            password => "${ES_PASSWORD}"
            manage_template => true
            action => "update"
            scripted_upsert => true
            script => "
                if (ctx._source.LastStatusCode == null) {
                    ctx._source.LastStatusCode = '%{LastStatusCode}';
                    ctx._source.DateAdded = params.event['%{LastStatusCode}']['InsertDttm'];
                }
                else {
                    if (params.event['%{LastStatusCode}']['TrackingID'] > ctx._source[ctx._source.LastStatusCode]['TrackingID']) {
                        ctx._source.LastStatusCode = '%{LastStatusCode}';
                        ctx._source.DateAdded = params.event['%{LastStatusCode}']['InsertDttm'];
                    }
                }

                params.event.remove('LastStatusCode');
                for (key in params.event.keySet()) { 
                    ctx._source[key] = params.event[key];
                }
            "
        }
}
