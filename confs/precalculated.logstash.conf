input {
    jdbc {
        id => "business_jdbc"
        jdbc_connection_string => "jdbc:sqlserver://desktop-pnhfnpj:1433;databaseName=Dev;integratedSecurity=false;"
        jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        jdbc_user => "Manchester"
        jdbc_password => "R3B0undM@n"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "date"
        tracking_column_type => "timestamp"
        use_column_value => true
        statement => "SELECT * FROM insightBusPreCalData_Demo WHERE 'Date' >:sql_last_value"
        type => "business"
        schedule => "0 0 * * *"  # Execute every day at 00:00
        # last_run_metadata_path => "/test_delayed_parcels_data_last_run_file"
    } 
    jdbc {
        id => "operations_jdbc"
        jdbc_connection_string => "jdbc:sqlserver://desktop-pnhfnpj:1433;databaseName=Dev;integratedSecurity=false;"
        jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        jdbc_user => "Manchester"
        jdbc_password => "R3B0undM@n"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "date"
        tracking_column_type => "timestamp"
        use_column_value => true
        statement => "SELECT * FROM InsightOpsPreCals_Demo WHERE 'Date' >:sql_last_value"
        type => "operations"
        schedule => "0 0 * * *"  # Execute every day at 00:00
        # last_run_metadata_path => "/test_delayed_parcels_data_last_run_file"
    }  
    jdbc {
        id => "customer_jdbc"
        jdbc_connection_string => "jdbc:sqlserver://desktop-pnhfnpj:1433;databaseName=Dev;integratedSecurity=false;"
        jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        jdbc_user => "Manchester"
        jdbc_password => "R3B0undM@n"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "date"
        tracking_column_type => "timestamp"
        use_column_value => true
        statement => "SELECT * FROM insightCusPreCalData_Demo WHERE 'Date' >:sql_last_value"
        type => "customer"
        schedule => "0 0 * * *"  # Execute every day at 00:00
        # last_run_metadata_path => "/test_delayed_parcels_data_last_run_file"
    }  
}
filter {
    aggregate {
        task_id => "%{country}%{date}"
        code => "
            map['country'] = event.get('country')
            map['date'] = event.get('date')

            map['operations_reted_order_reged'] = event.get('reted_order_reged')
            map['operations_reted_item_reged'] = event.get('reted_item_reged')
            map['operations_refund_val_of_reged'] = event.get('refund_val_of_reged')
            map['operations_parcels_reg_with_carrier'] = event.get('parcels_reg_with_carrier')
            map['operations_parcels_reg_at_hub'] = event.get('parcels_reg_at_hub')
            map['operations_parcels_reg_with_client'] = event.get('parcels_reg_with_client')
            map['operations_ave_tot_days_to_ret'] = event.get('ave_tot_days_to_ret')
            map['operations_ave_days_for_cus_to_reg_a_ret'] = event.get('ave_days_for_cus_to_reg_a_ret')
            map['operations_ave_days_to_car'] = event.get('ave_days_to_car')
            map['operations_ave_days_to_hub'] = event.get('ave_days_to_hub')
            map['operations_ave_days_to_client'] = event.get('ave_days_to_client')
            map['operations_tot_inbound_par_currently_in_tran'] = event.get('tot_inbound_par_currently_in_tran')
            map['operations_tot_inbound_item_currently_in_tran'] = event.get('tot_inbound_item_currently_in_tran')
            map['operations_ref_val_of_inbound_stock_currently_in_tran'] = event.get('ref_val_of_inbound_stock_currently_in_tran')
            map['operations_ave_refund_val_of_stock_in_tran'] = event.get('ave_refund_val_of_stock_in_tran')

            map['customer_average_total_order_value'] = event.get('average_total_order_value')
            map['customer_averge_order_keep_value'] = event.get('averge_order_keep_value')
            map['customer_averge_order_refund_value'] = event.get('averge_order_refund_value')
            map['customer_average_cost_per_returned_order'] = event.get('average_cost_per_returned_order')
            map['customer_average_items_in_order'] = event.get('average_items_in_order')
            map['customer_average_items_kept'] = event.get('average_items_kept')
            map['customer_average_items_returned'] = event.get('average_items_returned')

            map['business_total_orders'] = event.get('total_orders')
            map['business_fully_kept_orders'] = event.get('fully_kept_orders')
            map['business_orders_with_refunds'] = event.get('orders_with_refunds')
            map['business_financial_return_rate'] = event.get('financial_return_rate')
            map['business_order_return_rate'] = event.get('order_return_rate')
            map['business_item_return_rate'] = event.get('item_return_rate')
            map['business_averge_order_keep_value'] = event.get('averge_order_keep_value')
            map['business_averge_order_refund_value'] = event.get('averge_order_refund_value')
            map['business_total_inbound_items_currently_in_transit'] = event.get('total_inbound_items_currently_in_transit')
            map['business_refund_value_of_inbound_stock_currently_in_transit'] = event.get('refund_value_of_inbound_stock_currently_in_transit')
            map['business_average_days_for_customer_to_register_a_return'] = event.get('average_days_for_customer_to_register_a_return')

            event.cancel()
        "
        inactivity_timeout => 600  #seconds since last event
        push_map_as_event_on_timeout => true
        timeout_task_id_field => "task_id"
    }
}
output {
    elasticsearch {
        index => "%{client_id}_insight_metrics_demo"
        hosts => "localhost:8080"
    }
    stdout { codec => rubydebug }
}