input {
	jdbc {
        id => "fetch_returns_items_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "numeric"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE}" }
        statement => "SELECT id, items_data, date_added, shop_id, order_reference, country
                      FROM returns_orders
                      WHERE items_data != 'null' AND items_data != '' AND items_data != '[]' AND date_added >= UNIX_TIMESTAMP(:select_from_date) AND date_added > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_returns_items_table_last_run"
    }
}
filter {
    date {
        match => ["date_added", "UNIX"]
        remove_field => "date_added"
        target => "DateAdded"
    }
    mutate {
        rename => {
            "id" => "ReturnID"
            "shop_id" => "ClientID"
            "order_reference" => "OrderRef"
            "country" => "CountryCode"
        }
        remove_field => [ "@timestamp", "@version" ]
    }
    ruby {
        id => "apply_lookups"
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)

            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]

            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
            end
        "
    }
    json {
		source => "items_data"
        target => "items_data"
	}
    ruby {
        id => "get_items_data"
        code => "
            normalized_items = Array.new()
            items = event.get('items_data')
            event.remove('items_data')

            if items.kind_of?(Hash)
                items.each { |item_id, item_values|
                    reasons = Array.new()
                    if item_values['reasons_additional'].kind_of?(Array)
                        item_values['reasons_additional'].each { |reason_obj|
                            reasons.push({
                                'ReturnAction' => reason_obj['action'],
                                'ReturnReason' => reason_obj['reason'],
                                'ReturnReasonCat' => reason_obj['reason_category']
                            })
                        }
                    end

                    normalized_items.push({
                        'ItemID' => item_id,
                        'OrderID' => item_values['order_id'],
                        'SkuCode' => item_values['sku_code'],
                        'SkuDesc' => item_values['sku_desc'],
                        'Quantity' => item_values['quantity'],
                        'Price' => item_values['price'],
                        'ReturnedQuantity' => item_values['returned_quantity'],
                        'Reasons' => reasons
                    })
                }
                event.set('items_data', normalized_items)
            else
                event.cancel()
            end
        "
    }
    split {
        field => "items_data"
    }
    ruby {
        id => "change_doc_structure"
        code => "
            event.set('ItemID', event.get('[items_data][ItemID]').to_i)
            event.set('OrderID', event.get('[items_data][OrderID]').to_i)
            event.set('SkuCode', event.get('[items_data][SkuCode]'))
            event.set('SkuDesc', event.get('[items_data][SkuDesc]'))
            event.set('Quantity', event.get('[items_data][Quantity]').to_i)
            event.set('ReturnedQuantity', event.get('[items_data][ReturnedQuantity]').to_i)
            event.set('Price', event.get('[items_data][Price]').to_f)
            event.set('Reasons', event.get('[items_data][Reasons]'))
        "
        remove_field => [ "@timestamp", "@version", "items_data" ]
    }
}
output {
    elasticsearch {
            hosts => "${ES_HOST}"
            index => "returns_items"
            document_id => "%{ClientID}_%{OrderRef}_%{ReturnID}_%{ItemID}"
            user => "${ES_USER}"
            password => "${ES_PASSWORD}"
            doc_as_upsert => true
            action => "update"
            manage_template => true
        }
}
