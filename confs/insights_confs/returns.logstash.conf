input {
	jdbc {
        id => "fetch_returns_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_fetch_size => 10000
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "tracking_last_update_dt"
        tracking_column_type => "numeric"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE_UNIX_TIMESTAMP}" }
        statement => "SELECT id, tracking, date_added, shop_id, order_reference, carrier_id, service_id, tracking_last_update_dt,
                             order_id, addr3, state, zip, country, display_id, pallet_id, tracking_status_code, items_data
                      FROM returns_orders
                      WHERE shop_id IN (15, 24, 27, 46) AND date_added >= :select_from_date
                      AND tracking_last_update_dt > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_returns_table_last_run"
    }
}
filter {
    date {
        match => ["date_added", "UNIX"]
        target => "DateAdded"
    }
    json {
		source => "items_data"
        target => "items_data"
	}
    mutate {
        rename => {
            "id" => "ReturnID"
            "tracking" => "TrackingCode"
            "shop_id" => "ClientID"
            "order_reference" => "OrderRef"
            "carrier_id" => "CarrierID"
            "service_id" => "ServiceID"
            "order_id" => "OrderID"
            "addr3" => "Addr3"
            "state" => "State"
            "zip" => "ZIP"
            "country" => "CountryCode"
            "display_id" => "DisplayID"
            "pallet_id" => "PalletID"
            "tracking_status_code" => "StatusCode"
        }
    }
    ruby {
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)
            
            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)

            services_json = File.read(ENV['SERVICES_FILE'])
            @@services = JSON.parse(services_json)

            carriers_json = File.read(ENV['CARRIERS_FILE'])
            @@carriers = JSON.parse(carriers_json)

            statuses_json = File.read(ENV['STATUSES_FILE'])
            @@statuses = JSON.parse(statuses_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]
            service_name = @@services[event.get('ServiceID').to_s]
            carrier_name = @@carriers[event.get('CarrierID').to_s]
            status_name = @@statuses[event.get('StatusCode').to_s]
            
            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
                event.set('ServiceName', service_name)
                event.set('CarrierName', carrier_name)
                event.set('StatusName', status_name)

                items = event.get('items_data')

                if items.kind_of?(Hash)
                    quantity = 0
                    total_price = 0.0
                    items.each { |item_id, item_values|
                        quantity = quantity + item_values['quantity'].to_i
                        total_price = total_price + item_values['quantity'].to_i * item_values['price'].to_f
                    }
                    if quantity != 0
                        event.set('Quantity', quantity)
                        event.set('TotalPrice', total_price)
                    end
                end
            end
        "
    }
    jdbc_streaming {
        id => "get_order_date"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        statement => "SELECT order_date
                      FROM orders
                      WHERE shop_id = :event_shop_id AND order_reference = :event_order_ref"
        parameters => { 
            "event_shop_id" => "ClientID"
            "event_order_ref" => "OrderRef"
        }
        target => "order"
        tag_on_failure => ["_error_at_jdbc_streaming_returns_pipeline"]
        tag_on_default_use => ["_no_data_at_jdbc_streaming_returns_pipeline"]
    }
    date {
        match => ["[order][0][order_date]", "UNIX"]
        target => "OrderDate"
    }
    ruby {
        code => '
            event.set("DaysToRegisterAReturn", (event.get("DateAdded").to_i - event.get("OrderDate").to_i) / (60*60*24))
        '
        remove_field => [ "@timestamp", "@version", "order", "date_added", "items_data", "tracking_last_update_dt" ]
    }
}
output {
    elasticsearch {
        hosts => "${ES_HOST}"
        index => "returns_records_v4"
        document_id => "%{ClientID}_%{OrderRef}_%{ReturnID}"
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        doc_as_upsert => true
        action => "update"
        manage_template => true
    }
    elasticsearch {
        hosts => "${ES_HOST}" 
        index => "orders_records_v4"
        document_id => "%{ClientID}_%{OrderRef}"
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        manage_template => true
        action => "update"
        scripted_upsert => true
        script => "
            ctx._source.WithReturn = 1;
            if (params.event.get('Quantity') != null) {
                if (ctx._source.ReturnQuantity == null) {
                    ctx._source.ReturnQuantity = params.event.get('Quantity');
                    ctx._source.ReturnTotalPrice = params.event.get('TotalPrice');
                } 
                else {
                    ctx._source.ReturnQuantity = ctx._source.ReturnQuantity + params.event.get('Quantity');
                    ctx._source.ReturnTotalPrice = ctx._source.ReturnTotalPrice + params.event.get('TotalPrice');
                }
            }
        "
    }
    elasticsearch {
        hosts => "${ES_HOST}" 
        index => "trackings_records_v4"
        document_id => "%{ClientID}_%{OrderRef}_%{TrackingCode}"
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        manage_template => true
        action => "update"
        scripted_upsert => true
        script => "
            if (params.event.get('Quantity') != null) {
                ctx._source.Quantity = params.event.get('Quantity');
                ctx._source.TotalPrice = params.event.get('TotalPrice');
            }
        "
    }
}
