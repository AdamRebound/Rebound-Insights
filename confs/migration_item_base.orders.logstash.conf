input {
	jdbc {
        id => "fetch_orders_table"
        jdbc_connection_string => "jdbc:mysql://35.205.176.248:3306/returns"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_user => "rebound_user"
        jdbc_password => "GJEMMzNkNG9m"
        # jdbc_page_size => 10000
        # jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "timestamp"
        use_column_value => true
        statement => "SELECT *
                      FROM orders
                      WHERE shop_id = 24 AND date_added > '2019-09-01' AND date_added > :sql_last_value LIMIT 10000"
        # schedule => "* * * * *"
        last_run_metadata_path => ".fetch_orders_table_last_run"
    }
}
filter {
  jdbc_streaming {
    jdbc_connection_string => "jdbc:mysql://35.205.176.248:3306/returns"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_user => "rebound_user"
    jdbc_password => "GJEMMzNkNG9m"
    statement => "SELECT * FROM items WHERE order_id = :order_id"
    parameters => { "order_id" => "id"}
    target => "items_data"
  }
  ruby {
    id => "orders_to_items"
    code => '
      arrayOfEvents = Array.new()
      items = event.get("items_data")
      event.remove("items_data")
      
      event_hash = event.to_hash
      order_info = {} 
      event_hash.each { |key,value| 
        order_info[key] = value if value != "" and value != nil and value != "null" and value != "[]"
        event.remove(key)
      }
      # need for calculations of partial returns and total returns
      order_info["count_of_item_positions"] = items.length  
      order_info["total_items_quantity"] = 0
      items.each { |item_values|
          order_info["total_items_quantity"] += item_values["quantity"].to_i
      }
      
      items.each { |item_values|
          item_record = {}
          item_values.each { |key,value|
            item_record[key] = value if value != "" and value != nil and value != "null" and value != "[]"
          }

          item_record["order"] = order_info

          arrayOfEvents.push(item_record)
      }

      event.set("event",arrayOfEvents)
    '
  }
  split {
    field => 'event'
  }
  ruby {
    id => "rename_fields"
    code => '
      event_data = event.get("event")
      event.remove("event")
      event_data.each { |key,value|
        event.set(key, value)
      }
    '
  }
  date {
    match => ["[order][order_date]", "UNIX"]
    target => "[order][order_date]"
  }
  date {
    match => ["[order][date_last_edited]", "UNIX"]
    target => "[order][date_last_edited]"
  }
  mutate {
    convert => {
      "price" => "float"
      "id" => "integer"
      "non_returnable" => "boolean"
      "weight" => "float"
      "length" => "integer"
      "width" => "integer"
      "height" => "integer"
      "order_id" => "integer"
      "[order][id]" => "integer"
    }
  }
}
output {
    elasticsearch {
            hosts => "localhost:8080"
            index => "%{[order][shop_id]}_test_returns_orders_items_of_all"
            document_id => "%{[order][order_reference]}_%{id}"
            doc_as_upsert => true
            action => "update"
            manage_template => true
        }
}