input {
	jdbc {
        id => "fetch_trackings_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "dt"
        tracking_column_type => "numeric"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE}" }
        statement => "SELECT tracking_log.id, tracking_code, dt, status_code, location, tracking_log.date_added,
                             returns_orders.shop_id, returns_orders.order_reference, returns_orders.carrier_id, returns_orders.service_id, 
                             returns_orders.order_id, returns_orders.country, tracking_log.archived
                      FROM tracking_log
                      JOIN returns_orders on tracking_log.tracking_code = returns_orders.tracking
                      WHERE dt >= UNIX_TIMESTAMP(:select_from_date) AND dt > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_trackings_table_last_run"
    }
}
filter {
    date {
        match => ["dt", "UNIX"]
        remove_field => "dt"
        target => "InsertDttm"
    }
    date {
        match => ["date_added", "UNIX"]
        remove_field => "date_added"
        target => "DateAdded"
    }
    json {
		source => "location"
        target => "location"
	}
    mutate {
        rename => {
            "id" => "TrackingID"
            "tracking_code" => "TrackingCode"
            "shop_id" => "ClientID"
            "order_reference" => "OrderRef"
            "carrier_id" => "CarrierID"
            "service_id" => "ServiceID"
            "order_id" => "OrderID"
            "archived" => "Archived"
            "country" => "CountryCode"
            "status_code" => "StatusCode"
        }
        remove_field => [ "@timestamp", "@version" ]
    }
    ruby {
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)
            
            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)

            services_json = File.read(ENV['SERVICES_FILE'])
            @@services = JSON.parse(services_json)

            carriers_json = File.read(ENV['CARRIERS_FILE'])
            @@carriers = JSON.parse(carriers_json)

            statuses_json = File.read(ENV['STATUSES_FILE'])
            @@statuses = JSON.parse(statuses_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]
            service_name = @@services[event.get('ServiceID').to_s]
            carrier_name = @@carriers[event.get('CarrierID').to_s]
            status_name = @@statuses[event.get('StatusCode').to_s]
            
            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
                event.set('ServiceName', service_name)
                event.set('CarrierName', carrier_name)
                status_code_data = {
                    'TrackingID' => event.get('TrackingID'),
                    'InsertDttm' => event.get('InsertDttm'),
                    'DateAdded' => event.get('DateAdded'),
                    'Archived' => event.get('Archived'),
                    'StatusName' => status_name
                }
                location = event.get('location')
                status_code_data['Location'] = location if location.kind_of?(Hash)
                event.set(event.get('StatusCode').to_s, status_code_data)

                event.remove('StatusCode')
                event.remove('TrackingID')
                event.remove('InsertDttm')
                event.remove('location')
                event.remove('DateAdded')
                event.remove('Archived')
            end
        "
    }
}
output {
    elasticsearch {
            hosts => "${ES_HOST}"
            index => "trackings"
            document_id => "%{ClientID}_%{OrderRef}_%{TrackingCode}"
            user => "${ES_USER}"
            password => "${ES_PASSWORD}"
            doc_as_upsert => true
            action => "update"
            manage_template => true
        }
}
