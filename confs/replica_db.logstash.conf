input {
	jdbc {
        id => "fetch_orders_table"
        jdbc_connection_string => "jdbc:mysql://35.205.176.248:3306/returns"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_user => "rebound_user"
        jdbc_password => "GJEMMzNkNG9m"
        # jdbc_page_size => 100000
        # jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "numeric"
        use_column_value => true
        statement => "SELECT *
                      FROM returns_orders
                      WHERE items_data != 'null' AND items_data != '' AND items_data != '[]' AND date_added > :sql_last_value 
                      LIMIT 10"
        type => "orders"
        # schedule => "* * * * *"
        last_run_metadata_path => ".fetch_orders_table_last_run"
    }
}
filter {
  json {
		source => "items_data"
    target => "items_data"
	}
  ruby {
    id => "returns_orders_to_items"
    code => '
      arrayOfEvents = Array.new()
      items = event.get("items_data")
      event.remove("items_data")
      
      event_hash = event.to_hash
      return_order_info = {} 
      event_hash.each { |key,value| 
        return_order_info[key] = value if value != "" and value != nil and value != "null" and value != "[]"
        event.remove(key)
      }

      return_order_info["order_id"] = return_order_info["id"]
      return_order_info.delete("id")

      items.each { |item_id, item_values|
          item_record = {
            "item_id" => item_id
          }
          item_values.each { |key,value|
            item_record[key] = value if value != "" and value != nil and value != "null" and value != "[]"
          }
          if item_record["status"] != nil 
            item_record["item_status"] = item_record["status"]
            item_record.delete("status")
          end

          item_record = item_record.merge(return_order_info)

          arrayOfEvents.push(item_record)
      }

      event.set("event",arrayOfEvents)
    '
  }
  split {
    field => 'event'
  }
  ruby {
    id => "rename_fields"
    code => '
      event_data = event.get("event")
      event.remove("event")
      event_data.each { |key,value|
        event.set(key, value)
      }
    '
  }
  mutate {
    convert => {
      "quantity" => "integer"
    }
  }
}
output {
    elasticsearch {
            hosts => "localhost:9200"
            index => "test_returns_orders_items_of_all"
            document_id => "%{order_reference}_%{item_id}"
            # doc_as_upsert => true
            # action => "update"
            # manage_template => true
        }
    stdout { codec => rubydebug }
}