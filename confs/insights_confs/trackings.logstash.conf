input {
	jdbc {
        id => "fetch_trackings_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_fetch_size => 100000
        # jdbc_page_size => 100000
        # jdbc_paging_enabled => true
        tracking_column => "tracking_last_update_dt"
        tracking_column_type => "numeric"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE_UNIX_TIMESTAMP}" }
        statement => "SELECT id, shop_id, order_reference, carrier_id, service_id, order_id, country, tracking, tracking_last_update_dt 
                      FROM returns_orders 
                      WHERE shop_id IN (15, 24, 27, 46) AND date_added >= :select_from_date 
                      AND tracking_last_update_dt > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_trackings_table_last_run"
    }
}
filter {
    jdbc_streaming {
        id => "get_tracking_logs"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        statement => "SELECT id, dt, status_code, date_added, archived
                      FROM tracking_log
                      WHERE tracking_code = :event_tracking_code"
        parameters => { "event_tracking_code" => "tracking" }
        target => "tracking_data"
        tag_on_failure => ["_error_at_jdbc_streaming_trackings_pipeline"]
        tag_on_default_use => ["_no_data_at_jdbc_streaming_trackings_pipeline"]
    }
    mutate {
        rename => {
            "id" => "ReturnID"
            "shop_id" => "ClientID"
            "order_reference" => "OrderRef"
            "carrier_id" => "CarrierID"
            "service_id" => "ServiceID"
            "order_id" => "OrderID"
            "country" => "CountryCode"
            "tracking" => "TrackingCode"
        }
    }
    ruby {
        init => "
            require 'json'
            require 'date'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)
            
            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)

            services_json = File.read(ENV['SERVICES_FILE'])
            @@services = JSON.parse(services_json)

            carriers_json = File.read(ENV['CARRIERS_FILE'])
            @@carriers = JSON.parse(carriers_json)

            statuses_json = File.read(ENV['STATUSES_FILE'])
            @@statuses = JSON.parse(statuses_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]
            service_name = @@services[event.get('ServiceID').to_s]
            carrier_name = @@carriers[event.get('CarrierID').to_s]

            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
                event.set('ServiceName', service_name)
                event.set('CarrierName', carrier_name)

                tracking_data = event.get('tracking_data')
                last_status_code = 0
                last_status_code_id = 0
                last_date_added = 0
                tracking_data.each { |tracking_record|
                    status_code = tracking_record['status_code'].to_s
                    status_name = @@statuses[status_code]
                    
                    next if status_name.nil?
                    status_data = {
                        'TrackingID' => tracking_record['id'].to_i,
                        'InsertDttm' => Time.at(tracking_record['dt'].to_i),
                        'DateAdded' => Time.at(tracking_record['date_added'].to_i),
                        'Archived' => tracking_record['archived'].to_i,
                        'StatusName' => status_name
                    }

                    event.set(status_code, status_data)

                    if status_data['TrackingID'] >= last_status_code_id
                        last_status_code_id = status_data['TrackingID']
                        last_status_code = status_code.to_i
                        last_date_added = status_data['DateAdded']
                    end
                }
                if last_status_code != 0
                    event.set('LastStatusCode', last_status_code)
                    event.set('DateAdded', last_date_added)
                end
            end
        "
        remove_field => [ "@timestamp", "@version", "tracking_last_update_dt", "tracking_data" ]
    }
}
output {
    elasticsearch {
        hosts => "${ES_HOST}"
        index => "trackings_records_v4"
        document_id => "%{ClientID}_%{OrderRef}_%{TrackingCode}"
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        doc_as_upsert => true
        action => "update"
        manage_template => true
    }
}
