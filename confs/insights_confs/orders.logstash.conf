input {
	jdbc {
        id => "fetch_orders_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_page_size => 100000
        jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "timestamp"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE}" }
        statement => "SELECT id, order_reference, order_date, country, currency_code, 
                             shop_id, date_added, tracking
                      FROM orders 
                      WHERE date_added >= :select_from_date AND date_added > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"
        last_run_metadata_path => ".fetch_orders_table_last_run"
    }
}
filter {
    date {
        match => ["order_date", "UNIX"]
        remove_field => "order_date"
        target => "OrderDate"
    }
    mutate {
        rename => {
            "id" => "OrderID"
            "order_reference" => "OrderRef"
            "country" => "CountryCode"
            "currency_code" => "Ğ¡urrencyĞ¡ode"
            "date_added" => "DateAdded"
            "tracking" => "Tracking"
            "shop_id" => "ClientID"
        }
        remove_field => [ "@timestamp", "@version" ]
    }
    ruby {
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)

            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]

            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
            end
        "
    }

}
output {
    elasticsearch {
            hosts => "${ES_HOST}"
            index => "orders"
            document_id => "%{ClientID}_%{OrderRef}"
            user => "${ES_USER}"
            password => "${ES_PASSWORD}"
            doc_as_upsert => true
            action => "update"
            manage_template => true
        }
}
