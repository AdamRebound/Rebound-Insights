input {
	jdbc {
        id => "fetch_returns_orders_table"
        jdbc_connection_string => "jdbc:mysql://35.205.176.248:3306/returns"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_user => "rebound_user"
        jdbc_password => "GJEMMzNkNG9m"
        # jdbc_page_size => 10000
        # jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "numeric"
        use_column_value => true
        statement => "SELECT *
                      FROM returns_orders
                      WHERE shop_id = 24 AND FROM_UNIXTIME(date_added) > '2019-09-01' AND items_data != 'null' AND items_data != '' AND items_data != '[]' AND date_added > :sql_last_value LIMIT 20000"
        # schedule => "* * * * *"
        last_run_metadata_path => ".fetch_orders_table_last_run"
    }
}
filter {
  json {
	source => "items_data"
    target => "items_data"
	}
  json {
    source => "collection_date"
    target => "collection_date"
  }
  json {
    source => "paycheck_info"
    target => "paycheck_info"
  }
  ruby {
    id => "rename_fields"
    code => '
      event_data = event.to_hash
      event_data.delete("order_reference")
      event_data.delete("order_id")
      event_data.delete("shop_id")

      items_data = event_data["items_data"]
      event_data["items_data"] = []
      items_data.each { |item_id, item_values|
        item_values["quantity"] = item_values["quantity"].to_i
        item_values["price"] = item_values["price"].to_f
        item_values["id"] = item_values["id"].to_i
        item_values["non_returnable"] = item_values["non_returnable"].to_s == "1"
        item_values["weight"] = item_values["weight"].to_f
        item_values["length"] = item_values["length"].to_i
        item_values["width"] = item_values["width"].to_i
        item_values["height"] = item_values["height"].to_i
        item_values["returned_quantity"] = item_values["returned_quantity"].to_i

        event_data["items_data"].push(item_values)
      }

      event.set("returns", event_data)
      event_data.each { |key,value|
        event.remove(key)
      }
    '
  }
  date {
    match => ["[returns][date_added]", "UNIX"]
    target => "[returns][date_added]"
  }
  date {
    match => ["[returns][date_delivered]", "UNIX"]
    target => "[returns][date_delivered]"
  }
  date {
    match => ["[returns][tracking_last_update_dt]", "UNIX"]
    target => "[returns][tracking_last_update_dt]"
  }
  date {
    match => ["[returns][tracking_last_check_dt]", "UNIX"]
    target => "[returns][tracking_last_check_dt]"
  }
  date {
    match => ["[returns][tracking_first_scan_added_dt]", "UNIX"]
    target => "[returns][tracking_first_scan_added_dt]"
  }
  date {
    match => ["[returns][tracking_first_scan_dt]", "UNIX"]
    target => "[returns][tracking_first_scan_dt]"
  }
  date {
    match => ["[returns][tracking_20_dt]", "UNIX"]
    target => "[returns][tracking_20_dt]"
  }
  date {
    match => ["[returns][tracking_30_dt]", "UNIX"]
    target => "[returns][tracking_30_dt]"
  }
  date {
    match => ["[returns][tracking_40_dt]", "UNIX"]
    target => "[returns][tracking_40_dt]"
  }
  date {
    match => ["[returns][tracking_43_dt]", "UNIX"]
    target => "[returns][tracking_43_dt]"
  }
  date {
    match => ["[returns][tracking_45_dt]", "UNIX"]
    target => "[returns][tracking_45_dt]"
  }
  date {
    match => ["[returns][tracking_50_dt]", "UNIX"]
    target => "[returns][tracking_50_dt]"
  }
  date {
    match => ["[returns][tracking_60_dt]", "UNIX"]
    target => "[returns][tracking_60_dt]"
  }
  date {
    match => ["[returns][tracking_90_dt]", "UNIX"]
    target => "[returns][tracking_90_dt]"
  }
  date {
    match => ["[returns][tracking_201_dt]", "UNIX"]
    target => "[returns][tracking_201_dt]"
  }
  date {
    match => ["[returns][tracking_202_dt]", "UNIX"]
    target => "[returns][tracking_202_dt]"
  }
  date {
    match => ["[returns][tracking_70_dt]", "UNIX"]
    target => "[returns][tracking_70_dt]"
  }
  mutate {
    convert => {
      "[returns][id]" => "integer"      
      "order_id" => "integer"
    }
  }
}
output {
    elasticsearch {
            hosts => "localhost:8080"
            index => "%{shop_id}_orders_base_test"
            document_id => "%{order_reference}"
            action => "update"
            manage_template => true
            scripted_upsert => true
            script => '
                if (ctx._source.returns == null) {
                    ctx._source.returns = [params.event.get("returns")];
                } else {
                    ctx._source.returns.add(params.event.get("returns"));
                }
            '
        }
}