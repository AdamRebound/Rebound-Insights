input {
	jdbc {
    jdbc_connection_string => "jdbc:sqlserver://desktop-pnhfnpj:1433;databaseName=Dev;integratedSecurity=false;"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_user => "Manchester"
		jdbc_password => "R3B0undM@n"
    jdbc_page_size => 100000
    jdbc_paging_enabled => true
    tracking_column => "record_added_time"
    tracking_column_type => "timestamp"
    use_column_value => true
    statement => "SELECT tb2.ItemID as item_id, tb1.ClientID as client_id, tb1.OrderRef as order_ref, tb1.date_added_dt as tracking_status_date, 
                         tb1.OrderID as order_id, tb3.OrderCountry as country, tb1.CountryName as country_name, tb1.Status as status_description, tb1.statuscode as status_code, 
                         tb1.TrackingSeq as tracking_seq, tb1.TrackingSeqRev as tracking_seq_rev, tb2.ReturnDate as returned_date, tb2.Quantity as returned_quantity, 
                         tb3.OrderCurrencyCode as currency_code, tb3.OrderDate as order_date, tb3.quantity as order_quantity, tb3.price, tb3.EachPrice as each_price,
                         tb1.insertDate as record_added_time
                  FROM insightTracking tb1
                  LEFT JOIN InsightReturns tb2 ON tb1.OrderRef = tb2.OrderRef AND tb1.ClientID = tb2.ClientID
                  LEFT JOIN insightOrders tb3 ON tb1.OrderRef = tb3.OrderRef AND tb1.ClientID = tb3.ClientID
                  WHERE (tb1.ClientID = 24 or tb1.ClientID = 46) AND tb1.insertDate >:sql_last_value"
    schedule => "*/1440 * * * *"
    # last_run_metadata_path => "/test_delayed_parcels_data_last_run_file"
	}
	
}

filter {
  # Create unique document ID for each information about item, for each order and for each client. Outputs "fingeprint" field
  fingerprint {
    source => ["client_id", "order_ref", "item_id"]
    concatenate_sources => true
    method => "SHA1"
  }


  aggregate {
    # Merge all records from SQL query with the same "fingeprint" fields (client_id + order_red + item_id)
    task_id => "%{fingerprint}"
    code => "
      map['fingerprint'] = event.get('fingerprint')
      map['item_id'] = event.get('item_id')
      map['client_id'] = event.get('client_id')
      map['order_ref'] = event.get('order_ref')
      map['order_id'] = event.get('order_id')
      map['country'] = event.get('country')
      map['country_name'] = event.get('country_name')
      map['returned_date'] = event.get('returned_date')
      map['returned_quantity'] = event.get('returned_quantity')
      map['currency_code'] = event.get('currency_code')
      map['order_date'] = event.get('order_date')
      map['order_quantity'] = event.get('order_quantity')
      map['price'] = event.get('price')
      map['each_price'] = event.get('each_price')

      map['tracking_status_dates'] ||= []
      map['tracking_status_dates'] << event.get('tracking_status_date')
      map['status_descriptions'] ||= []
      map['status_descriptions'] << event.get('status_description')
      map['status_codes'] ||= []
      map['status_codes'] << event.get('status_code')
      map['tracking_seqs'] ||= []
      map['tracking_seqs'] << event.get('tracking_seq')
      map['tracking_seq_revs'] ||= []
      map['tracking_seq_revs'] << event.get('tracking_seq_rev')
      event.cancel()
    "
    inactivity_timeout => 600  #seconds since last event
    push_map_as_event_on_timeout => true
    timeout_task_id_field => "fingerprint"
  }
}

output {
	elasticsearch {
    index => "%{client_id}_insights_test_index"
    document_id => "%{fingerprint}"
    hosts => "localhost:8080"
	}
  stdout { codec => rubydebug }
}