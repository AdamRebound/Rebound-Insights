input {
	jdbc {
        id => "fetch_orders_items_table"
        jdbc_connection_string => "${JDBC_CONNECTION_URL}"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_user => "${JDBC_CONNECTION_USER}"
        jdbc_password => "${JDBC_CONNECTION_PASSWORD}"
        jdbc_page_size => 1000000
        jdbc_paging_enabled => true
        tracking_column => "date_added"
        tracking_column_type => "timestamp"
        use_column_value => true
        parameters => { "select_from_date" => "${DB_QUERY_SELECT_FROM_DATE}" }
        statement => "SELECT items.id, items.order_id, items.sku_code, items.sku_desc, items.quantity, items.price, 
                             orders.date_added, orders.shop_id, orders.order_reference, orders.order_date, orders.country,
                             orders.currency_code
                      FROM items 
                      INNER JOIN orders ON orders.id = items.order_id
                      WHERE orders.shop_id IN (15, 24, 27, 46) AND orders.date_added >= :select_from_date AND orders.date_added > :sql_last_value"
        schedule => "${CRON_SCHEDULE}"  
        last_run_metadata_path => ".fetch_orders_items_table_last_run"
    }
}
filter {
    date {
        match => ["order_date", "UNIX"]
        remove_field => "order_date"
        target => "OrderDate"
    }
    mutate {
        rename => {
            "id" => "ItemID"
            "order_id" => "OrderID"
            "sku_code" => "SkuCode"
            "sku_desc" => "SkuDesc"
            "quantity" => "Quantity"
            "price" => "Price"
            "date_added" => "DateAdded"
            "shop_id" => "ClientID"
            "order_reference" => "OrderRef"
            "country" => "CountryCode"
            "currency_code" => "CurrencyCode"
        }
        remove_field => [ "@timestamp", "@version" ]
    }
    ruby {
        init => "
            require 'json'

            clients_json = File.read(ENV['CLIENTS_FILE'])
            @@clients = JSON.parse(clients_json)

            countries_json = File.read(ENV['COUNTRIES_FILE'])
            @@countries = JSON.parse(countries_json)
        "
        code => "
            client_name = @@clients[event.get('ClientID').to_s]
            country_name = @@countries[event.get('CountryCode')]

            if client_name.nil?
                event.cancel()
            else
                event.set('ClientName', client_name)
                event.set('CountryName', country_name)
                event.set('TotalPrice', event.get('Price') * event.get('Quantity'))
            end
        "
    }

}
output {
    elasticsearch {
            hosts => "${ES_HOST}"
            index => "orders_items_records_v2"
            document_id => "%{ClientID}_%{OrderRef}_%{ItemID}"
            user => "${ES_USER}"
            password => "${ES_PASSWORD}"
            doc_as_upsert => true
            action => "update"
            manage_template => true
        }
}
